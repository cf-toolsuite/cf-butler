plugins {
    id 'com.gorylenko.gradle-git-properties' version '2.2.2'
    id 'org.springframework.boot' version '2.3.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'com.github.ben-manes.versions' version '0.28.0'
    id 'io.franzbecker.gradle-lombok' version '4.0.0'
	id 'java'
    id 'jacoco'
    id 'com.google.cloud.tools.jib' version '2.4.0'
    id 'maven-publish'
    id 'com.github.spotbugs' version '4.4.1'
    id 'info.solidsoft.pitest' version '1.5.1'
}

gitProperties {
    dateFormat = "yyyy-MM-dd'T'HH:mmZ"
    dateFormatTimeZone = "UTC"
}

spotbugs {
    toolVersion = '4.0.3'
    ignoreFailures = true
    effort = 'max'
    reportLevel = 'low'
    showProgress = true
}

spotbugsMain {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
        }
        xml {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.xml")
        }
    }
}

group = 'io.pivotal'
version = '0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_11

repositories {
	mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
    maven { url "https://jitpack.io" }
}

ext {
    set('springCloudServicesVersion', '3.1.2.RELEASE')
	set('springCloudVersion', "2020.0.0-M2")
    // @see https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-dependencies/pom.xml
    set('spring-data-releasetrain.version', 'Neumann-RELEASE')
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		mavenBom "io.pivotal.spring.cloud:spring-cloud-services-dependencies:${springCloudServicesVersion}"
	}
}

bootRun {
    // support passing -Dsystem.property=value to bootRun task
    systemProperties = System.properties
}

configurations {
	// exclude Logback
    implementation.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
        exceptionFormat "full"
        showCauses true
        showExceptions true
        showStackTraces true
	}
}

java {
    withJavadocJar()
    withSourcesJar()
}

jacoco {
	toolVersion = "0.8.5"
}

jacocoTestReport {
	reports {
		xml.enabled = true
		html.enabled = true
		csv.enabled = false
	}
}

pitest {
    testPlugin = "junit5"
    jvmArgs = ['-Xmx1024m']
    threads = 5
    targetClasses = ['io.pivotal.cfapp.*']
    outputFormats = ['XML', 'HTML']
}

dependencies {
    annotationProcessor('org.projectlombok:lombok')
    implementation('org.projectlombok:lombok')
    implementation('org.springframework.boot:spring-boot-configuration-processor')
    implementation('org.apache.commons:commons-lang3')
    implementation('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')
    implementation('com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.11.0')
    implementation('com.fasterxml.uuid:java-uuid-generator:4.0.1')
    implementation('io.pivotal.cfenv:java-cfenv-boot:2.1.2.RELEASE')
    implementation('org.springframework.credhub:spring-credhub-cloud-connector:2.0.1.RELEASE')
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-starter-webflux')
    implementation('org.springframework.boot:spring-boot-starter-log4j2')
    implementation('com.lmax:disruptor:3.4.2')
    implementation('org.springframework.boot:spring-boot-starter-data-r2dbc')
    implementation('org.springframework.data:spring-data-relational:2.0.1.RELEASE')
    implementation('org.locationtech.jts:jts-core:1.16.1')
    implementation('io.r2dbc:r2dbc-spi')
    runtime('io.r2dbc:r2dbc-pool')
    implementation('io.r2dbc:r2dbc-h2')
    runtime('com.github.mirromutth:r2dbc-mysql:v0.8.1.RELEASE')
    implementation('org.eclipse.jgit:org.eclipse.jgit:5.7.0.202003110725-r')
    implementation('org.springframework.boot:spring-boot-starter-mail')
    implementation('com.sendgrid:sendgrid-java:4.6.0') {
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    implementation('org.apache.httpcomponents:httpclient:4.5.12')
    implementation('org.cloudfoundry:cloudfoundry-client-reactor:4.7.0.RELEASE')
    implementation('org.cloudfoundry:cloudfoundry-operations:4.7.0.RELEASE')
    implementation('io.projectreactor:reactor-core:3.3.6.RELEASE')
    implementation('io.projectreactor.netty:reactor-netty:0.9.8.RELEASE')
    implementation('io.micrometer:micrometer-registry-prometheus')
    testImplementation('io.projectreactor:reactor-test')
    testImplementation('org.assertj:assertj-core:3.16.1')
    testImplementation('org.junit.jupiter:junit-jupiter-api')
    testImplementation('org.junit.jupiter:junit-jupiter-params')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')
    testImplementation('org.mockito:mockito-core')
    testImplementation('org.mockito:mockito-junit-jupiter')
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	    exclude group: 'junit', module: 'junit'
    }
    testImplementation('org.pitest:pitest-junit5-plugin:0.12')
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'cf-butler'
                url = 'https://github.com/pacphi/cf-butler'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'pacphi'
                        name = 'Chris Phillipson'
                        email = 'cphillipson@pivotal.io'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/pacphi/cf-butler.git'
                    developerConnection = 'scm:git:ssh://github.com/pacphi/cf-butler.git'
                    url = 'https://github.com/pacphi/cf-butler'
                }
            }
        }
    }
    repositories {
        mavenLocal()
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = "$buildDir/repos/releases"
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

import io.franzbecker.gradle.lombok.task.DelombokTask

task delombok(type: DelombokTask, dependsOn: compileJava) {
    ext.outputDir = file("$buildDir/delombok")
    outputs.dir(outputDir)
    sourceSets.main.java.srcDirs.each {
        inputs.dir(it)
        args(it, "-d", outputDir)
    }
    doFirst {
        outputDir.deleteDir()
    }
}

javadoc {
    dependsOn delombok
    source = delombok.outputDir
    failOnError = false
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

bootJar.enabled = true
jar.enabled = false

test.finalizedBy jacocoTestReport
